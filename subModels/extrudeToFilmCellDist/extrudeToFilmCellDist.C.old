/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright (C) 2011-2017 OpenFOAM Foundation
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.

Application
    extrudeToFilmCellDist

Group
    grpLagrangianSolvers

Description
    Transient solver for compressible, turbulent flow with a reacting,
    multiphase particle cloud, and surface film modelling.

\*---------------------------------------------------------------------------*/

#include "OSspecific.H"
#include "fvCFD.H"
#include "IOobjectList.H"
/*#include "domainDecomposition.H"
#include "domainDecompositionDryRun.H"
#include "labelIOField.H"
#include "labelFieldIOField.H"
#include "scalarIOField.H"
#include "scalarFieldIOField.H"
#include "vectorIOField.H"
#include "vectorFieldIOField.H"
#include "sphericalTensorIOField.H"
#include "sphericalTensorFieldIOField.H"
#include "symmTensorIOField.H"
#include "symmTensorFieldIOField.H"
#include "tensorIOField.H"
#include "tensorFieldIOField.H"
#include "pointFields.H"
#include "regionProperties.H"
*/
//#include "readFields.H"
//#include "dimFieldDecomposer.H"
//#include "fvFieldDecomposer.H"
//#include "pointFieldDecomposer.H"
//#include "lagrangianFieldDecomposer.H"
//#include "decompositionModel.H"

//#include "faCFD.H"
//#include "emptyFaPatch.H"
//#include "faMeshDecomposition.H"
//#include "faFieldDecomposer.H"

//#include "surfaceFilmModel.H"
//#include "fvOptions.H"
//#include "iceSingleLayer.H"


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

int main(int argc, char *argv[])

{



    #include "postProcess.H"

    #include "addCheckCaseOptions.H"
    #include "setRootCase.H"
    #include "createTime.H"
//    #include "createDynamicFvMesh.H"
//    #include "createDyMControls.H"
//    #include "createFields.H"
//    #include "createFieldRefs.H"
//    #include "createRhoUf.H"
//    #include "createRegionControls.H"
//    #include "initContinuityErrs.H"
//    #include "initMoveMeshes.H"


    Info<< "\nReading cellDist\n" << endl;
    volScalarField cellDist
    (
	IOobject
        (
	    "cellDist",
    	    runTime.timeName(),
    	    mesh,
    	    IOobject::MUST_READ,
    	    IOobject::NO_WRITE
        ),
	mesh
    );
Info<<cellDist<<endl;

/*
    turbulence->validate();

    if (!LTS)
    {
        #include "compressibleCourantNo.H"
        #include "setInitialDeltaT.H"
    }

    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

    Info<< "\nStarting time loop\n" << endl;

    volScalarField olddeltaIce=filmSWIM->deltaIce();

    while (runTime.run())
    {
        #include "readDyMControls.H"


        if (LTS)
        {
            #include "setRDeltaT.H"
        }
        else
        {
            #include "compressibleCourantNo.H"
            #include "setMultiRegionDeltaT.H"
        }

        runTime++;

        Info<< "Time = " << runTime.timeName() << nl << endl;

        parcels.evolve();
	TParcels=dimensionedScalar("", dimTemperature, parcels.Tmin());
	olddeltaIce=filmSWIM->deltaIce();
        surfaceFilm.evolve();
        
	if (moveMeshes) {
            #include "moveMeshes.H"
        }

        if (solvePrimaryRegion)
        {
            if (pimple.nCorrPIMPLE() <= 1)
            {
                #include "rhoEqn.H"
            }

            // --- PIMPLE loop
            while (pimple.loop())
            {
                #include "UEqn.H"
                #include "YEqn.H"
                #include "EEqn.H"

                // --- Pressure corrector loop
                while (pimple.correct())
                {
                    #include "pEqn.H"
                }

                if (pimple.turbCorr())
                {
                    turbulence->correct();
                }
            }

            rho = thermo.rho();
        }

        runTime.write();

        runTime.printExecutionTime(Info);
    }
*/
    Info<< "End" << endl;

    return 0;
}


// ************************************************************************* //
